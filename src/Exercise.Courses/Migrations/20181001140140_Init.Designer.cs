// <auto-generated />
using System;
using Exercise.Courses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Exercise.Courses.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20181001140140_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Exercise.Courses.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaxCapacity");

                    b.Property<string>("Name");

                    b.Property<int>("TeacherId");

                    b.Property<string>("Topic");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Exercise.Courses.Models.CourseStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<int>("MaxCapacity");

                    b.Property<int>("StudentAverageAge");

                    b.Property<int>("StudentMaximumAge");

                    b.Property<int>("StudentMinimumAge");

                    b.HasKey("Id");

                    b.ToTable("CourseStatistics");
                });

            modelBuilder.Entity("Exercise.Courses.Models.CourseStudent", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("StudentId");

                    b.Property<DateTimeOffset>("SignupAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("Exercise.Courses.Models.Identity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Email");

                    b.Property<string>("NormalizedEmail");

                    b.HasKey("Id");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("Exercise.Courses.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("BirthYear");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Exercise.Courses.Models.Person+Teacher", b =>
                {
                    b.HasBaseType("Exercise.Courses.Models.Person");


                    b.ToTable("Teacher");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Exercise.Courses.Models.Course", b =>
                {
                    b.HasOne("Exercise.Courses.Models.Person+Teacher", "Teacher")
                        .WithMany("GivenCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exercise.Courses.Models.CourseStudent", b =>
                {
                    b.HasOne("Exercise.Courses.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exercise.Courses.Models.Person", "Student")
                        .WithMany("AttendingCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exercise.Courses.Models.Identity", b =>
                {
                    b.HasOne("Exercise.Courses.Models.Person")
                        .WithOne("Identity")
                        .HasForeignKey("Exercise.Courses.Models.Identity", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
